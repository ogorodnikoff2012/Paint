#include "headers/mainwindow.h"
#include "headers/plugin.h"
#include "headers/brush.h"
#include "headers/pencil.h"
#include "headers/line.h"
#include "headers/workspaceshell.h"
#include "headers/paintworkspace.h"

#include <QtCore>
#include <QtGui>
#include <QtWidgets>


MainWindow *MainWindow::window = 0;

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    currentInstrument(0)
{
    window = this;
    initBackgroundBrush();
    createGUI();
    resize(800, 600);
    setWindowTitle(tr("Paint"));
    loadPlugins();
}

QColor MainWindow::getFirstColor()
{
    return pal->getFirstColor();
}

QColor MainWindow::getSecondColor()
{
    return pal->getSecondColor();
}

PaintWorkspace* MainWindow::newFile(int width, int height)
{
    WorkspaceShell *s = new WorkspaceShell(0, width, height);
    area->addSubWindow(s);
    s->show();
    return s->getWorkspace();
}

void MainWindow::newFile()
{
    QSpinBox *width = new QSpinBox;
    QSpinBox *height = new QSpinBox;
    QCheckBox *transparentBackground = new QCheckBox(tr("Transparent background"));
    QDialog *dialog = createNewFileDialog(width, height, transparentBackground);
    int ans = dialog->exec();

    if (ans == QDialog::Accepted)
    {
        int w = width->value();
        int h = height->value();
        PaintWorkspace *wsp = newFile(w, h);

        if (transparentBackground->isChecked())
        {
            wsp->removeLayer(0);
            wsp->addNewLayer();
        }
    }

    delete dialog;
}

QDialog *MainWindow::createNewFileDialog(QSpinBox *width, QSpinBox *height,
        QCheckBox *transparentBackground)
{
    QDialog *dialog = new QDialog;
    QDialogButtonBox *buttonBox = new QDialogButtonBox(QDialogButtonBox::Ok |
            QDialogButtonBox::Cancel);
    QVBoxLayout *layout = new QVBoxLayout;

    QHBoxLayout *layout_1 = new QHBoxLayout;
    QLabel *label_1 = new QLabel(tr("Width"));
    width->setMaximum(800000);
    width->setValue(800);
    width->setSuffix("px");
    layout_1->addWidget(label_1);
    layout_1->addWidget(width);

    QHBoxLayout *layout_2 = new QHBoxLayout;
    QLabel *label_2 = new QLabel(tr("Height"));
    height->setMaximum(600000);
    height->setValue(600);
    height->setSuffix("px");
    layout_2->addWidget(label_2);
    layout_2->addWidget(height);

    layout->addLayout(layout_1);
    layout->addLayout(layout_2);
    layout->addWidget(transparentBackground);
    layout->addWidget(buttonBox);
    connect(buttonBox, SIGNAL(accepted()), dialog, SLOT(accept()));
    connect(buttonBox, SIGNAL(rejected()), dialog, SLOT(reject()));
    dialog->setLayout(layout);
    return dialog;
}

void MainWindow::open()
{
    QStringList list = QFileDialog::getOpenFileNames(0, tr("Open files"),
                       QDir::homePath(), PaintWorkspace::getFilter());
    foreach(QString str, list)
    {
        open(str);
    }

    setWindowState(Qt::WindowActive | windowState());
}

void MainWindow::save()
{
    PaintWorkspace *wsp = getCurrentWorkspace();

    if (wsp)
    {
        wsp->save();
    }

    setWindowState(Qt::WindowActive | windowState());
}

void MainWindow::saveAs()
{
    PaintWorkspace *wsp = getCurrentWorkspace();

    if (wsp)
    {
        wsp->save(true);
    }

    setWindowState(Qt::WindowActive | windowState());
}

void MainWindow::zoomIn()
{
    PaintWorkspace *wsp = getCurrentWorkspace();

    if (wsp)
    {
        wsp->zoomIn();
    }
}

void MainWindow::zoomOut()
{
    PaintWorkspace *wsp = getCurrentWorkspace();

    if (wsp)
    {
        wsp->zoomOut();
    }
}

void MainWindow::restoreZoom()
{
    PaintWorkspace *wsp = getCurrentWorkspace();

    if (wsp)
    {
        wsp->restoreZoom();
    }
}

void MainWindow::undo()
{
    PaintWorkspace *wsp = getCurrentWorkspace();

    if (wsp)
    {
        wsp->undo();
    }
}

void MainWindow::redo()
{
    PaintWorkspace *wsp = getCurrentWorkspace();

    if (wsp)
    {
        wsp->redo();
    }
}

void MainWindow::closeEvent(QCloseEvent *evt)
{
    foreach(QMdiSubWindow * sw, area->subWindowList())
    {
        if (!sw->close())
        {
            evt->ignore();
            return;
        }
        else
        {
            delete sw;
        }
    }
    evt->accept();
}

void MainWindow::updateUndoButtons()
{
    PaintWorkspace *wsp = getCurrentWorkspace();

    if (wsp)
    {
        aUndo->setEnabled(wsp->undoAvailable());
        aRedo->setEnabled(wsp->redoAvailable());
    }
    else
    {
        aUndo->setEnabled(false);
        aRedo->setEnabled(false);
    }
}

void MainWindow::loadPlugins()
{
    QDir pluginsDir(qApp->applicationDirPath());
#if defined(Q_OS_WIN)

    if (pluginsDir.dirName().toLower() == "debug"
            || pluginsDir.dirName().toLower() == "release")
    {
        pluginsDir.cdUp();
    }

#elif defined(Q_OS_MAC)

    if (pluginsDir.dirName() == "MacOS")
    {
        pluginsDir.cdUp();
        pluginsDir.cdUp();
        pluginsDir.cdUp();
    }

#endif
    pluginsDir.cd("plugins");
    foreach(QString fileName, pluginsDir.entryList(QDir::Files))
    {
        QPluginLoader pluginLoader(pluginsDir.absoluteFilePath(fileName));
        QObject *obj = pluginLoader.instance();

        if (obj)
        {
            Plugin *plugin = qobject_cast<Plugin *>(obj);

            if (plugin)
            {
                plugin->initPlugin(this);
            }
        }
    }
}

void MainWindow::createGUI()
{
    area = new QMdiArea;
    area->setHorizontalScrollBarPolicy(Qt::ScrollBarAsNeeded);
    area->setVerticalScrollBarPolicy(Qt::ScrollBarAsNeeded);
    setCentralWidget(area);

    createInstrumentsToolBar();
    createMenuBar();
    createPalette();
    createStatusBar();

    statusBar()->showMessage(tr("Ready"), 2000);
}

void MainWindow::createInstrumentsToolBar()
{
    QToolBar *tBar = new QToolBar(tr("Instruments"));
    instrumentBar = tBar;
    Pencil::instance->init();
    Brush::instance->init();
    Line::instance->init();
    tBar->addAction(createAction(Pencil::instance));
    tBar->addAction(createAction(Brush::instance));
    tBar->addAction(createAction(Line::instance));
    setCurrentInstrument(Pencil::instance);
    addToolBar(Qt::LeftToolBarArea, tBar);
}

void MainWindow::createMenuBar()
{
    QMenu *mFile = new QMenu(tr("File"));

    QAction *aNew = new QAction(tr("New"), 0);
    aNew->setIcon(QIcon(":icons/new.png"));
    aNew->setShortcut(QKeySequence(QKeySequence::New));
    connect(aNew, SIGNAL(triggered()), SLOT(newFile()));

    QAction *aOpen = new QAction(tr("Open"), 0);
    aOpen->setIcon(QIcon(":icons/open.png"));
    aOpen->setShortcut(QKeySequence(QKeySequence::Open));
    connect(aOpen, SIGNAL(triggered()), SLOT(open()));

    QAction *aSave = new QAction(tr("Save"), 0);
    aSave->setIcon(QIcon(":icons/save.png"));
    aSave->setShortcut(QKeySequence(QKeySequence::Save));
    connect(aSave, SIGNAL(triggered()), SLOT(save()));

    QAction *aSaveAs = new QAction(tr("Save as"), 0);
    aSaveAs->setShortcut(QKeySequence(QKeySequence::SaveAs));
    connect(aSaveAs, SIGNAL(triggered()), SLOT(saveAs()));

    QAction *aExit = new QAction(tr("Exit"), 0);
    aExit->setIcon(QIcon(":icons/exit.png"));
    aExit->setShortcut(QKeySequence(QKeySequence::Quit));
    connect(aExit, SIGNAL(triggered()), SLOT(close()));

    mFile->addAction(aNew);
    mFile->addAction(aOpen);
    mFile->addAction(aSave);
    mFile->addAction(aSaveAs);
    mFile->addSeparator();
    mFile->addAction(aExit);

    QMenu *mView = new QMenu(tr("View"));

    QAction *aZoomIn = new QAction(tr("Zoom in"), 0);
    aZoomIn->setIcon(QIcon(":icons/zoom_in.png"));
    aZoomIn->setShortcut(QKeySequence(QKeySequence::ZoomIn));
    connect(aZoomIn, SIGNAL(triggered()), SLOT(zoomIn()));

    QAction *aZoomOut = new QAction(tr("Zoom out"), 0);
    aZoomOut->setIcon(QIcon(":icons/zoom_out.png"));
    aZoomOut->setShortcut(QKeySequence(QKeySequence::ZoomOut));
    connect(aZoomOut, SIGNAL(triggered()), SLOT(zoomOut()));

    QAction *aRestoreZoom = new QAction(tr("Restore zoom"), 0);
    connect(aRestoreZoom, SIGNAL(triggered()), SLOT(restoreZoom()));

    QAction *aCascade = new QAction(tr("Cascade"), 0);
    connect(aCascade, SIGNAL(triggered()), area, SLOT(cascadeSubWindows()));

    QAction *aTile = new QAction(tr("Tile"), 0);
    connect(aTile, SIGNAL(triggered()), area, SLOT(tileSubWindows()));

    mView->addAction(aZoomIn);
    mView->addAction(aZoomOut);
    mView->addAction(aRestoreZoom);
    mView->addSeparator();
    mView->addAction(aCascade);
    mView->addAction(aTile);

    QMenu *mEdit = new QMenu(tr("Edit"));

    aUndo = new QAction(tr("Undo"), 0);
    aUndo->setIcon(QIcon(":icons/undo.png"));
    aUndo->setShortcut(QKeySequence(QKeySequence::Undo));
    connect(aUndo, SIGNAL(triggered()), SLOT(undo()));

    aRedo = new QAction(tr("Redo"), 0);
    aRedo->setIcon(QIcon(":icons/redo.png"));
    aRedo->setShortcut(QKeySequence(QKeySequence::Redo));
    connect(aRedo, SIGNAL(triggered()), SLOT(redo()));

    connect(mEdit, SIGNAL(aboutToShow()), SLOT(updateUndoButtons()));

    mEdit->addAction(aUndo);
    mEdit->addAction(aRedo);

    menuBar()->addMenu(mFile);
    menuBar()->addMenu(mView);
    menuBar()->addMenu(mEdit);
}

void MainWindow::createPalette()
{
    QDockWidget *dock = new QDockWidget;
    pal = new Palette;
    dock->setWidget(pal);
    addDockWidget(Qt::BottomDockWidgetArea, dock);
}

void MainWindow::createStatusBar()
{
    mouseCoords = new QLabel("(0, 0)");
    statusInformation = new QLabel;
    statusBar()->addWidget(statusInformation, 1);
    statusBar()->addWidget(mouseCoords);
}

void MainWindow::setCurrentInstrument(Instrument *i)
{
    if (!i)
    {
        return;
    }

    if (currentInstrument && currentInstrument->settings)
    {
        removeDockWidget(currentInstrument->settings);
    }

    currentInstrument = i;

    if (currentInstrument->settings)
    {
        addDockWidget(Qt::LeftDockWidgetArea, currentInstrument->settings);
        currentInstrument->settings->show();
    }

    area->setCursor(*(i->cursor));
    qDebug() << "Instrument selected:" << i->getName();
}

PaintWorkspace *MainWindow::getCurrentWorkspace()
{
    QMdiSubWindow *sw = area->currentSubWindow();

    if (!sw)
    {
        return 0;
    }

    QWidget *w = sw->widget();
    WorkspaceShell *sh = qobject_cast<WorkspaceShell *>(w);

    if (!sh)
    {
        return 0;
    }

    return sh->getWorkspace();
}

QAction *MainWindow::createAction(Instrument *instrument)
{
    QAction *action = new QAction(0);
    action->setText(instrument->getName());
    action->setIcon(*(instrument->icon));
    action->setData(toQVariant(instrument));
    connect(action, SIGNAL(triggered()), this, SLOT(changeInstrument()));
    return action;
}

void MainWindow::initBackgroundBrush()
{
    QImage *backgroundImage = new QImage(16, 16, QImage::Format_RGB32);
    QPainter backgroundPainter(backgroundImage);
    backgroundPainter.setBrush(QBrush(Qt::lightGray));
    backgroundPainter.setPen(Qt::NoPen);
    backgroundPainter.drawRect(0, 0, 8, 8);
    backgroundPainter.drawRect(8, 8, 8, 8);
    backgroundPainter.setBrush(QBrush(Qt::gray));
    backgroundPainter.drawRect(0, 8, 8, 8);
    backgroundPainter.drawRect(8, 0, 8, 8);
    backgroundPainter.end();

    background = QBrush(*backgroundImage);
}

void MainWindow::updateIndicators()
{
    PaintWorkspace *wsp = getCurrentWorkspace();

    if (!wsp)
    {
        return;
    }

    mouseCoords->setText("(" + QString::number(wsp->getCoords().x()) + ", " +
                         QString::number(wsp->getCoords().y()) + ")");
}

void MainWindow::open(const QString &filename)
{
    WorkspaceShell *s = new WorkspaceShell(0, 0, 0, filename);
    area->addSubWindow(s);
    s->show();
}
